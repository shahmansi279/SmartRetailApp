(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'download'"
p3
sS'layer'
p4
S'C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\applications\\smartapp\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport gluon.contrib.simplejson as json\n\ndef register():\n\n    uemail=request.vars.uemail\n    password=request.vars.password\n    phone=request.vars.phone\n    address=request.vars.address\n    zipcode=request.vars.zipcode\n    code =412\n    message="error"\n    if uemail:\n        if password :\n            if phone :\n                if address :\n                    if zipcode :\n                        user_id=db.users.insert(uemail=uemail,password=password,phone=phone,address=address,zipcode=zipcode)\n                        if user_id:\n                                 message="success"\n                                 code=200\n\n    response.headers[\'Content-Type\']=\'application/json\'\n\n    response.status=int(code)\n    return json.dumps(dict(message=message))\n\ndef login():\n    import cgi\n    response.flash="Welcome"\n    id=request.vars.uemail\n    pwd=request.vars.password\n    rows=db(db.users.uemail==id).select(db.users.password)\n\n    if rows :\n        message="invalid username"\n        code=401\n        if(str(rows[0].password)==pwd) :\n            message="success"\n            code=200\n        else :\n            message="invalid  password"\n            code=401\n\n    else :\n       message="invalid username "\n       code=401\n\n    response.headers[\'Content-Type\']=\'application/json\'\n    response.status=int(code)\n    return json.dumps(dict(message=message))\n\n\ndef authenticate(uemail, password):\n\n    users= db((db.users.uemail== uemail)&(db.users.password==password)).select()\n    if users:\n        return True\n    else:\n        return False\n\ndef getuserrole(uemail):\n    \n  users= db((db.users.uemail== uemail)).select(db.users.role)\n  if users:\n        return users[0].role\n  \n\ndef addplace():\n    \n    uemail=request.vars.uemail\n    password=request.vars.password\n\n\n    place_desc=request.vars.place_desc\n    place_name=request.vars.place_name\n    place_addr=request.vars.place_addr\n    place_lat=""\n    place_long=""\n\n    valid_usr=authenticate(uemail,password)\n    if valid_usr:\n        usr_role=getuserrole(uemail)\n    \n        if(usr_role=="admin"):\n\n        #insert into gimbal server and get place-id , place_lat, place_long\n          \n\n            import urllib, urllib2, base64\n\n            data={"name":place_name}\n            data_json = json.dumps(data)\n            headers = {\n             \'Authorization\': \'Token token=f50ccc1aab3314434ae32dada87312cb\',\n             \'Content-Type\': \'application/json\'\n             }\n            req = urllib2.Request(\n            \'https://manager.gimbal.com/api/v2/places\',data_json, headers)\n            res=json.load(urllib2.urlopen(req))\n            place_id=res["id"]\n\n            #insert into datastore\n\n            pl_id=db.places.insert(place_id=place_id,place_desc=place_desc,place_name=place_name,place_addr=place_addr,place_lat=place_lat,\n                              place_long=place_long)\n            \n            if(pl_id) :\n                code=200\n                \n                message="success"\n                return json.dumps(dict(message=message))\n            else :\n                code=412\n         \n                message="error"\n              \n         \n        else:\n          code=401\n          message="user not authorized"\n\n    else:\n            code=412\n            message="User not Authenticated"\n\n    response.headers[\'Content-Type\']=\'application/json\'\n    response.status=int(code)\n    return json.dumps(dict(message=message))\n\ndef getplace():\n\n    # From Directly Gimbal\n    import urllib, urllib2, base64\n    \n    uemail=request.vars.uemail\n    password=request.vars.password\n\n    valid_usr=authenticate(uemail,password)\n    if valid_usr:\n\n        headers = {\n         \'Authorization\': \'Token token=f50ccc1aab3314434ae32dada87312cb\',\n         \'Content-Type\': \'application/json\'\n         }\n        req = urllib2.Request(\n        \'https://manager.gimbal.com/api/v2/places\',\n        None, headers)\n\n        code=200\n        response.headers[\'Content-Type\']=\'application/json\'\n        response.status=int(code)\n        return urllib2.urlopen(req).read()\n    \n    else:\n        code=412\n        response.headers[\'Content-Type\']=\'application/json\'\n        response.status=int(code)\n        return json.dumps(dict(message="error"))\n        \n\n\n\ndef getplaces():\n\n    uemail=request.vars.uemail\n    password=request.vars.password\n\n    valid_usr=authenticate(uemail,password)\n    if valid_usr:\n      #From Datastore\n        rows = db(db.places.id>0).select()\n        code=200\n        response.headers[\'Content-Type\']=\'application/json\'\n        response.status=int(code)\n\n        return json.dumps([{\'id\':r.place_id,\'name\':r.place_name,\'place_desc\':r.place_desc,\'place_lat\':r.place_lat,\'place_long\':r.place_long,\'place_addr\':r.place_addr} for r in rows])\n    else :\n        code=412\n        response.headers[\'Content-Type\']=\'application/json\'\n        response.status=int(code)\n        return json.dumps(dict(message=\'error\'))\n\ndef addbeacon():\n\n    uemail=request.vars.uemail\n    password=request.vars.password\n\n\n    beacon_name=request.vars.beacon_name\n    b_factory_id=request.vars.b_factory_id\n    beacon_lat=""\n    beacon_long=""\n    beacon_status="Active"\n\n    valid_usr=authenticate(uemail,password)\n    if valid_usr:\n        usr_role=getuserrole(uemail)\n    \n        if(usr_role=="admin"):\n\n        #insert into gimbal server and get place-id , place_lat, place_long\n          \n\n            import urllib, urllib2, base64\n\n            data={"name":beacon_name,"factory_id":b_factory_id}\n            data_json = json.dumps(data)\n            headers = {\n             \'Authorization\': \'Token token=f50ccc1aab3314434ae32dada87312cb\',\n             \'Content-Type\': \'application/json\'\n             }\n            req = urllib2.Request(\n            \'https://manager.gimbal.com/api/beacons\',data_json, headers)\n            res=json.load(urllib2.urlopen(req))\n            beacon_id=res["id"]\n            b_battery_lvl=res["battery_level"]\n            #insert into datastore\n\n            b_id=db.beacons.insert(beacon_id=beacon_id,beacon_name=beacon_name,b_factory_id=b_factory_id,beacon_lat=beacon_lat,beacon_long=beacon_long,beacon_status=beacon_status,b_battery_lvl=b_battery_lvl)\n\n\n            if(b_id) :\n\n                message="success"\n                return json.dumps(dict(message=message))\n            else :\n                code=412\n\n                message="error"\n\n        else:\n          code=401\n          message="user not authorized"\n\n    else:\n            code=412\n            message="User not Authenticated"\n\n    response.headers[\'Content-Type\']=\'application/json\'\n    response.status=int(code)\n    return json.dumps(dict(message=message))\n\n\n    return None\n\ndef getallbeacons():\n\n    uemail=request.vars.uemail\n    password=request.vars.password\n\n    valid_usr=authenticate(uemail,password)\n    if valid_usr:\n      #From Datastore\n        rows = db(db.beacons.id>0).select()\n        code=200\n        response.headers[\'Content-Type\']=\'application/json\'\n        response.status=int(code)\n\n        return json.dumps([{\'id\':r.beacon_id,\'b_f_id\':r.b_factory_id,\'name\':r.beacon_name,\'beacon_desc\':r.beacon_desc,\'beacon_lat\':r.beacon_lat,\'beacon_long\':r.beacon_long,\'beacon_status\':r.beacon_status,\'b_place_id\':r.b_place_id,\'b_battery_lvl\':r.b_battery_lvl }for r in rows])\n    else :\n        code=412\n        response.headers[\'Content-Type\']=\'application/json\'\n        response.status=int(code)\n        return json.dumps(dict(message=\'error\'))\n\n    return None\n\n\ndef updateBeaconStatus():\n    return None\n\ndef getimage(imgid):\n\n    imagename= db((db.image.id== imgid)).select(db.image.ufile)\n    return imagename[0].ufile\n\ndef show():\n    id = request.args(0)\n    filename = getimage(id)\n   # stream = open(filename,\'rb\')\n    return filename\n #response.stream(stream, attachment=True, filename=filename)\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(show)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\applications\\smartapp\\controllers/default.py", line 355, in <module>\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\applications\\smartapp\\controllers/default.py", line 289, in show\n    filename = getimage(id)\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\applications\\smartapp\\controllers/default.py", line 284, in getimage\n    imagename= db((db.image.id== imgid)).select(db.image.ufile)\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\dal\\objects.py", line 2066, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\dal\\adapters\\sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\dal\\adapters\\base.py", line 1219, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\dal\\adapters\\base.py", line 1117, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\dal\\adapters\\base.py", line 897, in expand\n    out = op(first, second, **optional_args)\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\dal\\adapters\\base.py", line 794, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\dal\\adapters\\base.py", line 908, in expand\n    return str(self.represent(expression,field_type))\n  File "C:\\Users\\mansi\\Downloads\\web2py_src\\web2py\\gluon\\dal\\adapters\\base.py", line 1357, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'download\'\n'
p11
s.